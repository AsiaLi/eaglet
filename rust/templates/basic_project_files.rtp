packages================ ./${service_name}/
api,business,db,commands,middlewares,config

================end

file================ ./${service_name}/.gitignore
*.pyc
.idea/*
.project
.*~
*.DS_Store
node_modules
static/upload/
venv

================end

file================ ./${service_name}/manage.py
#!/usr/bin/env python

import sys
from rust.command import command_manager

if __name__ == '__main__':
	command = sys.argv[1]
	command_manager.run_command(command)

================end

file================ ./${service_name}/settings.py
#coding: utf8

import os

PROJECT_HOME = os.path.dirname(os.path.abspath(__file__))

DEBUG = (os.environ.get('_DEBUG', '0') == '1')
MODE = os.environ.get('_SERVICE_MODE', 'develop')
SERVICE_NAME = '${service_name}'
SERVICE_PORT = 9001
SERVICE_HOST = '127.0.0.1:{}'.format(SERVICE_PORT)

UPLOAD_DIR = os.path.join(PROJECT_HOME, 'static', 'upload')  # 文件上传路径
UPLOAD_HTTP_PATH = '/static/upload'

def load_custom_configs():
	configs = {}
	for f in os.listdir('./config'):
		if f.startswith('__init'):
			continue

		if f.endswith('.py'):
			module_part = f[0:-3]
			module_name = 'config.{}'.format(module_part)
			module = __import__(module_name, {}, {}, ['*',])
			for attr in module.__dict__.keys():
				if attr.startswith('__'):
					continue

				if attr in configs:
					print '[WARN]: settings.%s(%s) is already defined' % (attr, f)

				configs[attr] = getattr(module, attr)

	return configs

locals().update(load_custom_configs())

================end

file================ ./${service_name}/api/resources.py
#coding: utf8

================end

file================ ./${service_name}/config/middlewares.py
#coding: utf8

#中间件
MIDDLEWARES = [
	'rust.middlewares.check_point_middleware.CheckPointMiddleware', #必须在列表首位！！
]

================end

file================ ./${service_name}/config/db.py
#coding: utf8

import os

DB_HOST = os.environ.get('_DB_HOST', 'db.dev.com')
DB_NAME = os.environ.get('_DB_NAME', 'service_name')
DB_USER = os.environ.get('_DB_USER', 'service_name')
DB_PORT = os.environ.get('_DB_PORT', '3306')
DB_PASSWORD = os.environ.get('_DB_PASSWORD', '123456')

DATABASES = {
	'default': {
		'ENGINE': 'mysql',
		'NAME': DB_NAME,
		'USER': DB_USER,
		'PASSWORD': DB_PASSWORD,
		'HOST': DB_HOST,
		'PORT': DB_PORT
	}
}

================end

file================ ./${service_name}/config/rust.py
#coding: utf8

import os

#信息输出配置
API_LOGGER_MODE = 'ALL'
ENABLE_CONSOLE = (os.environ.get('_ENABLE_API_CONSOLE', '1') == '1')

#无需经过中间件的资源
DIRECT_PATHS = [
	'/static',
	'/console',
	'/logined_user',
	'/registered_user',
	'/groups',
]

RUST_RESOURCES = [
	'test',
	'user',
	'permission',
]

CORS_WHITE_LIST = [] #为空则表示接受所有host

================end

file================ ./${service_name}/dockerfile

FROM registry.cn-hangzhou.aliyuncs.com/aix/python27:latest

ADD . /service
WORKDIR /service

RUN pip install -i http://pypi.douban.com/simple/ \
	--trusted-host pypi.douban.com \
	-r ./requirements.txt \
	&& rm -rf ~/.pip

ENTRYPOINT ["/usr/local/bin/dumb-init", "/bin/bash", "start_service.sh"]

================end

file================ ./${service_name}/start_service.sh

#!/bin/bash

PORT=`grep SERVICE_PORT settings.py | awk -F "=" '{print $$2}' | awk -F "," '{print $$1}' | xargs echo`

if [ "$$_SERVICE_MODE" == "develop" ]; then
	python manage.py runserver 0.0.0.0 $$PORT
else
	gunicorn server:app \
		--reload \
		--bind 127.0.0.1:$$PORT \
		--env API_GATEWAY=api.test.com \
		--env MODE=deploy \
		--env DB_NAME=$$_DB_NAME \
		--env DB_USER=$$_DB_USER \
		--env DB_HOST=$$_DB_HOST \
		--env DB_PORT=$$_DB_PORT \
		--env DB_PASSWORD=$$_DB_PASSWORD \
		--env _ENABLE_API_SERVICE_CONSOLE=0
fi

================end

file================ ./${service_name}/server.py

#coding:utf8

from rust import apps
app = apps.create_app()

================end

file================ ./${service_name}/build_image.sh

SERVICE_NAME=`grep SERVICE_NAME settings.py | awk -F "=" '{print $$2}' | awk -F "," '{print $$1}' | xargs echo`

docker build -t registry.cn-hangzhou.aliyuncs.com/aix/$$SERVICE_NAME:latest .

================end

file================ ./${service_name}/build_image.sh

#!/bin/bash

__SERVICE_NAME=`grep SERVICE_NAME settings.py | awk -F "=" '{print $$2}' | awk -F "," '{print $$1}' | xargs echo`

__SERVICE_PORT=$$1
if [ "$$__SERVICE_PORT" == "" ]; then
	__SERVICE_PORT=`grep SERVICE_PORT settings.py | awk -F "=" '{print $$2}' | awk -F "," '{print $$1}' | xargs echo`
fi

__GIT_BRANCH_NAME=`git branch -a | grep '*' | awk '{print $$2}'`
if [ "$$__GIT_BRANCH_NAME" == "master" ]; then
	__GIT_BRANCH_NAME=latest
fi

__NET_MODE="host"
__PLATFORM=`uname`
if [ "$$__PLATFORM" == "Darwin" ]; then
	__NET_MODE="bridge"
fi

if [ "$$_RUN" == "it" ]; then
	__RUN_MODE="-it"
else
	__RUN_MODE="-d"
fi

__RUN_NAME=$${__SERVICE_NAME}_$${__SERVICE_PORT}

docker stop $${__RUN_NAME}

docker rm -v $${__RUN_NAME}

docker run $${__RUN_MODE} --rm \
--name=$${__RUN_NAME} \
--net=$${__NET_MODE} \
-p $${__SERVICE_PORT}:$${__SERVICE_PORT} \
--env _SERVICE_PORT=$${__SERVICE_PORT} \
--env _SERVICE_MODE=deploy \
--env _DB_HOST=db.deploy.com \
--env _DB_USER=test \
--env _DB_PASSWORD=test \
--env _DB_NAME=test \
--env _DB_PORT=3306 \
--add-host api.test.com:127.0.0.1 \
--label MS_SERVICE_TYPE=data_service \
registry.cn-hangzhou.aliyuncs.com/aix/$${__SERVICE_NAME}:$${__GIT_BRANCH_NAME}

================end
